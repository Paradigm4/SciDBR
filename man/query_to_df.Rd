% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utility.R
\name{query_to_df}
\alias{query_to_df}
\title{Method to connect to a host, run SciDB query and return R dataframe}
\usage{
query_to_df(aflstr, dims, attribs, TYPES, NULLABILITY,
  host = options("scidb.default_shim_host")[[1]],
  port = options("scidb.default_shim_port")[[1]])
}
\arguments{
\item{aflstr}{the AFL query as a string}

\item{attribs}{a vector of strings listing the names of the attributes returned by the query}

\item{TYPES}{a vector of strings listing the data-types of the attributes returned by the query}

\item{NULLABILITY}{a vector of bools listing the nullability characteristic of the attributes returned by the query}

\item{host}{optional host name or I.P. address of a SciDB shim service to connect to}

\item{port}{optional port number of a SciDB shim service to connect to}
}
\description{
Alternate way of running a SciDB query. This does not require scidbconnect(); this function directly connects to the specified `host` at the specified `port` to issue the specified `query`. The caller must also have (and provide) the following information about the return data type -- the name, data type and nullability characteristic of each returned attribute.
Note that this method is for use when you want the result returned to an R dataframe; if you want to return some delimited output (e.g. CSV, TSV) or if you want to use SciDBR to issue queries without returning a result, use the `iquery()` method instead
}
\examples{
\dontrun{
# Connect to one R session and execute the following commands
# The store(apply(..)) query creates a temporary array `temp_demo` for demo purposes
library(scidb)
scidbconnect()
iquery("store(apply(build(<val1:double>[i=0:4,5,0, j=0:3,2,0], random()), val2, i*10+j), temp_demo)")

# Now disconnect from this R session and restart another R session
# In the subsequent code, we will not use scidbconnect() explicitly
library(scidb)
aflstr="between(temp_demo,0,0,2,2)"
TYPES=c("double", "int64")
NULLABILITY=c(FALSE, FALSE)
attribs=c("val1", "val2")
dims=c("i","j")
query_to_df(aflstr=aflstr, dims=dims, attribs=attribs, TYPES=TYPES, NULLABILITY=NULLABILITY)
# Note that you can supply a modified query while keeping the other parameters the same (so long as the return type remains the sam)
query_to_df(aflstr="between(temp_demo,1,1,3,3)", dims=dims, attribs=attribs, TYPES=TYPES, NULLABILITY=NULLABILITY)

# The real advantage of using this way of issuing SciDB queries and returning the result to R dataframes is evident when comparing timings with the alternate method of using scidbconnect() and iquery()
# Method 1:
t1 = proc.time(); x1 = query_to_df(aflstr="between(temp_demo,1,1,3,3)", dims=dims, attribs=attribs, TYPES=TYPES, NULLABILITY=NULLABILITY); (proc.time()-t1)[[3]]
# [1] 0.069
# Method 2:
t1 = proc.time(); scidbconnect(); x2 = iquery("between(temp_demo,1,1,3,3)", return=TRUE); (proc.time()-t1)[[3]]
# [1] 0.419 
# Finally verify that outputs are identical
identical(x1, x2)
# [1] TRUE

# Clean up
scidbrm("temp_demo", force=TRUE)
}
}

