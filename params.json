{"name":"SciDBR","tagline":"R package for SciDB","body":"Thanks for trying out the SciDB package for R. I hope you enjoy using it.\r\n\r\nThe current development version of this R package can always be installed\r\ndirectly from GitHub using the devtools package as follows:\r\n\r\n```\r\nlibrary('devtools')\r\ninstall_github(\"SciDBR\",\"paradigm4\",quick=TRUE)\r\n```\r\n\r\nThe SciDB R package requires installation of a simple open-source HTTP network\r\nservice called on the computer that SciDB is installed on. This service only\r\nneeds to be installed on the SciDB machine, not on client computers that\r\nconnect to SciDB from R.  It's available in packaged binary form for supported\r\nSciDB operating systems, and as source code which can be compiled and deployed\r\non any SciDB installation.\r\n\r\nSee http://github.com/paradigm4/shim  for source code and installation\r\ninstructions.\r\n\r\n\r\nNew features\r\n===\r\n\r\n## SciDB array promises\r\nMost functions return objects that represent array promises--unevaluated SciDB\r\nquery expressions with a result schema. Use the new `scidbeval` function or the\r\noptional `eval` function argument when available to force evaluation to a\r\nmaterialized SciDB backing array. Otherwise use the objects normally, deferring\r\nevaluation until required.\r\n\r\n## R Sparse matrix support\r\nThe package now supports double-precision valued R sparse matrices\r\ndefined via the `Matrix` package. Sparse SciDB matrices that are\r\nmaterialized to R are returned as sparse R matrices and vice-versa.\r\n\r\n## Heatmaps\r\nThe package overloads the standard R `image` function to plot heatmaps\r\nof SciDB array objects (only applies to objects of class `scidb`).\r\n```\r\nlibrary(\"devtools\")\r\ninstall_github(\"SciDBR\",\"Paradigm4\")\r\nlibrary(\"scidb\")\r\nscidbconnect()      # Fill in your SciDB hostname as required\r\n\r\n# Create a SciDB array with some random entries\r\niquery(\"store(build(<v:double>[i=0:999,100,0,j=0:999,250,0],random()%100),A)\")\r\n\r\n# The SciDBR `image` function overloads the usual R image function to produce\r\n# heatmaps using SciDB's `regrid` aggregation operator. The 'grid' argument\r\n# specifies the output array size, and the 'op' argument specifies the\r\n# aggregation operator to apply.\r\n\r\nX = image(A, grid=c(100,100), op=\"avg(v)\", useRaster=TRUE)\r\n```\r\n![Example output](https://raw.github.com/Paradigm4/SciDBR/master/inst/misc/image.jpg \"Example output\")\r\n\r\n```\r\n# Image accepts all the standard arguments to the R `image` function in\r\n# addition to the SciDB-specific `grid` and `op` arguments. The output axes are\r\n# labeled in the original array units. The scidb::image function returns the\r\n# interpolated heatmap array:\r\n\r\ndim(X)\r\n[1] 100 100\r\n```\r\n\r\n## Aggregation, merge, apply, sweep, bind, and related functions\r\nThe package has a completely new implementation of aggregation, merge, and\r\nrelated database functions. The new functions apply to SciDB array and data\r\nframe-like objects. A still growing list of the functions includes:\r\n\r\n* aggregate\r\n* bind  (SciDB `apply` operator--generalizes R's `cbind`)\r\n* index_lookup\r\n* merge (SciDB `join` and `cross\\_join` operators)\r\n* project\r\n* subset (SciDB `filter` operator)\r\n* sort\r\n* unique\r\n* sweep\r\n* apply (the R-style apply, not the SciDB AFL apply--see `bind` for that)\r\n* cumulate\r\n* cast, slice, repart, redimension, build (wrappers to SciDB operators)\r\n\r\nSee for example `help(\"subset\", package=\"scidb\")` for help on the `subset`\r\nfunction, or any of the other functions.\r\n\r\nPerhaps the coolest new feature associated with the functions listed above is\r\nthat they can be composed in a way that defers computation in SciDB to avoid\r\nunnecessary creation of intermediate arrays. The new functions all accept an\r\nargument named `eval` which, when set to FALSE, returns a new SciDB array\r\npromise object in place of evaluating the query and returning an array or data\r\nframe object.\r\n\r\nThe eval argument is automatically set to FALSE when any of the above functions\r\nare directly composed in R, unless manually overriden by explicitly setting\r\n`eval=TRUE`. Consider the following example:\r\n\r\n```\r\nx = as.scidb(iris)\r\nhead(x)\r\n  Sepal_Length Sepal_Width Petal_Length Petal_Width Species\r\n1          5.1         3.5          1.4         0.2  setosa\r\n2          4.9         3.0          1.4         0.2  setosa\r\n3          4.7         3.2          1.3         0.2  setosa\r\n4          4.6         3.1          1.5         0.2  setosa\r\n5          5.0         3.6          1.4         0.2  setosa\r\n6          5.4         3.9          1.7         0.4  setosa\r\n\r\na = aggregate(\r\n      project(\r\n        bind(x,name=\"PxP\", FUN=\"Petal_Length*Petal_Width\"),\r\n        attributes=c(\"PxP\",\"Species\")),\r\n      by=\"Species\", FUN=\"avg(PxP)\")\r\n\r\na[]\r\nSpecies_index PxP_avg    Species\r\n0             0  0.3656     setosa\r\n1             1  5.7204 versicolor\r\n2             2 11.2962  virginica\r\n```\r\nThe composed `aggregate(project(bind(...` functions were carried out in\r\nthe above example within a single SciDB transaction, storing only the result\r\nof the composed query.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}