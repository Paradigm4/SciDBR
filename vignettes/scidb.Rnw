% \VignetteIndexEntry{scidb Manual}
% \VignetteDepends{scidb}
% \VignettePackage{scidb}
\documentclass[12pt]{article}
\usepackage{amsmath}
\usepackage[pdftex]{graphicx}
\usepackage{color}
\usepackage{xspace}
\usepackage[T1]{fontenc}
%%\usepackage{xcolor,beramono}
%%\usepackage{tikz}
%%\usetikzlibrary{calc,positioning}
%%\usetikzlibrary{shapes.multipart,shapes.geometric,shapes.symbols,shapes.arrows}
%%\usetikzlibrary{decorations.shapes,decorations.text,decorations.pathreplacing}
\usepackage{fancyvrb}
\usepackage{fancyhdr}
\usepackage[
     colorlinks=true,
     linkcolor=blue,
     citecolor=blue,
     urlcolor=blue]
     {hyperref}
\usepackage{lscape}
\usepackage{Sweave}
\usepackage{tabularx}
\usepackage{listings}
\usepackage{float}
\usepackage{mdwlist}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% define new colors for use
\definecolor{darkgreen}{rgb}{0,0.6,0}
\definecolor{darkred}{rgb}{0.6,0.0,0}
\definecolor{lightbrown}{rgb}{1,0.9,0.8}
\definecolor{brown}{rgb}{0.6,0.3,0.3}
\definecolor{lgray}{rgb}{0.85,0.85,0.85}
\definecolor{darkblue}{rgb}{0,0,0.8}
\definecolor{darkmagenta}{rgb}{0.5,0,0.5}
\definecolor{mgray}{rgb}{0.65,0.65,0.65}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\newcommand{\bld}[1]{\mbox{\boldmath $#1$}}
\newcommand{\shell}[1]{\mbox{$#1$}}
\renewcommand{\vec}[1]{\mbox{\bf {#1}}}
\newcommand{\ReallySmallSpacing}{\renewcommand{\baselinestretch}{.6}\Large\normalsize}
\newcommand{\SmallSpacing}{\renewcommand{\baselinestretch}{1.1}\Large\normalsize}
\def\tm{\leavevmode\hbox{$\rm {}^{TM}$}}

\setlength{\oddsidemargin}{-.25 truein}
\setlength{\evensidemargin}{0truein}
\setlength{\topmargin}{-0.2truein}
\setlength{\textwidth}{7 truein}
\setlength{\textheight}{8.5 truein}
\setlength{\parindent}{0.00truein}
\setlength{\parskip}{0.10truein}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\pagestyle{fancy}
\lhead{}
\chead{The {\tt scidb} Package}
\rhead{}
\lfoot{}
\cfoot{}
\rfoot{\thepage}
\renewcommand{\headrulewidth}{1pt}
\renewcommand{\footrulewidth}{1pt}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\title{The {\tt scidb} Package}
\author{Bryan W. Lewis \\ 
blewis@paradigm4.com}

\begin{document}

\floatstyle{plain}
\newfloat{Code}{H}{myc}
\lstset{
  columns=fixed,
  breaklines=true,
  mathescape=false,
  basicstyle={\ttfamily\footnotesize},
  backgroundcolor=\color{lgray},
  aboveskip=0pt,belowskip=0pt
}


\thispagestyle{empty}

\vbox{}
%%\vspace{0.25\textheight}
%%\begin{tikzpicture}[remember picture,overlay]
%%\node[anchor=west,scale=2, inner sep=0pt, outer sep=0pt] (title) at (-1cm,0) 
%%{\LARGE\bfseries {\color{red}SciDB}\thinspace\Huge and R};
%%\draw[line width=5pt] ([yshift=-5pt]title.base west) -- ([yshift=-5pt]title.base east);	
%%\coordinate (titleOut) at ($(title.north east) + (24pt,0pt)$);
%%\coordinate (titleIn) at ($(title.base west) - (6pt,24pt)$);
%%\node[color=black!80,below=24pt of title.base east,anchor=east] (sub)
%%{\bfseries\itshape\Large Using the scidb package for R.};
%%\end{tikzpicture}
%%\vfill	
\vspace{0.5in}
\includegraphics[width=0.4\textwidth]{scidblogo}
\\[-62pt]
\begin{minipage}[b]{\textwidth}
\raggedleft
\includegraphics[width=0.2\textwidth]{Rlogo}\hspace{1in}
\end{minipage}
\\[-1.1in]
\begin{center}
{\Huge{\textsf{\textbf{and}}}}
\end{center}
\vspace{5in}

\begin{minipage}[b]{\textwidth}
\raggedleft
\includegraphics{p4logo}
\end{minipage}

\newpage
%\maketitle
\tableofcontents

\newpage
\section{Introduction}

SciDB is an open-source database that organizes data in $n$-dimensional arrays.
SciDB features include ACID transactions, parallel processing,
distributed storage, efficient sparse array storage, and native linear algebra
operations.  The \verb+scidb+ package for R provides two ways to
interact with SciDB from R:
\begin{enumerate}
\item By running SciDB queries from R, optionally transferring data through
data frames or data frame iterators.
\item Through several SciDB array object classes for R.
The arrays mimic standard R arrays and data frames, but operations on them
are performed by the SciDB engine.  Data are materialized to R only
when requested.
\end{enumerate}
In some cases, R scripts and packages may be used with little or no
modification with \verb+scidb+ arrays, allowing SciDB to power large-scale
parallel R computation.  This vignette illustrates using SciDB from R by
example. For more detailed information on the functions described in this
vignette, see the manual pages in the package.

\section{Connecting to SciDB and Running Queries}

This section outlines the most basic interaction between R and SciDB: running
queries and transferring one-dimensional SciDB arrays between R and SciDB
through R data frames.

\subsection{Connecting to SciDB}

The \verb+scidbconnect+ function establishes a connection to a simple HTTP
network service called shim running on a SciDB coordinator instance (see
Section \ref{shim}). The function may be safely called multiple times.  Once a
connection is established, connection information is maintained until a
different connection is established or the R session ends.

The network interface optionally supports TLS encryption and user
authentication. Users are defined by the operating system users on
the SciDB coordinator instance.

<<eval=TRUE,echo=FALSE>>=
library("scidb")
scidbconnect()
tryCatch(scidbrm(scidbls()),error=invisible)
@
{\bf Connect to localhost by default on unencrypted port 8080:}
<<>>=
library("scidb")
scidbconnect()
@

{\bf Connect to SciDB on an encrypted port 8083 with example authentication:}
<<eval=FALSE>>=
scidbconnect(host="localhost", port=8083, username="scidbuser", password="test")
@

The shim service can be configured to support either open/unencrypted
or encrypted/authenticated ports, or both. We recommend using only
encrypted/authenticated sessions when communicating with SciDB over
public networks.


\subsection{Listing and removing SciDB arrays}

The \verb+scidblist+ function lists SciDB objects (arrays, instances, etc.),
optionally showing detailed schema information for arrays. Returned
results may be filtered using regular expression-style syntax.

The \verb+scidbremove+ function removes a SciDB array, or optionally a
set of SciDB arrays defined by regular expression. The function
accepts a vector of array names, resulting in the removal of all the
specified arrays. Combine this feature with the regular expression filtering
output of \verb+scidblist+ to remove sets of arrays matching the filter.



\subsection{Running SciDB queries}

The \verb+iquery+ function executes SciDB queries using either the SciDB array
functional language (AFL) or declarative array query language (AQL) syntax.
When AFL is used, the \verb+iquery+ function optionally returns query results
in an R data frame if the argument \verb+return=TRUE+ is specified.  Returned
output is similar to output obtained by the SciDB \verb+iquery+ command-line
program with the \verb$-olcsv+$ option.  The \verb+iquery+ function does not
return anything by default.

Query results returned by the \verb+iquery+ function are internally presented
to R using a generic CSV format, providing very flexible support for many data
types.  (The $n$-dimensional array class described in the next section uses a
binary data exchange method between R and SciDB.) Note that, although R and
SciDB have a number of common data types, each system contains types not
supported by the other.  Thus, conversion errors may arise. The \verb+iquery+
function is designed to reasonably minimize such issues and simplify basic data
transfer between the systems.  Data types common to R and SciDB include
double-precision numeric, character string, logical, and 32-bit
integers. They \verb+iquery+ function supports
standard R \verb+read.table+ parameter options to facilitate type conversion.

The following code example illustrates basic use of \verb+iquery+.
<<>>=
library("scidb")
scidbconnect()

# Manuall build a 1-d SciDB array named "P:"
iquery("store(build(<x:double>[i=0:99,100,0],asin(1)*i/25),P)")

# Return a query as a data.frame, manually specifying returned column classes:
S <- iquery("apply(P,y,sin(x))",return=TRUE,
            colClasses=c("integer","double","complex"))
head(S, n=3)
@


\subsection{Iterating over query results}

The \verb+iquery+ function returns query results into a single R data frame by
default. Large results expected to contain lots of rows may be iterated over
by setting the \verb+iterative=TRUE+ argument. When \verb+iquery+ is
used with the \verb+iterative=TRUE+ setting, it returns an iterator that
iterates over chunks of rows of the result data frame.  Iterators are defined
by the \verb+iterators+ package. Their data may be directly accessed with the
\verb+nextElem+ method, or indirectly with \verb+foreach+. See the
\verb+iterators+ and \verb+foreach+ packages for many examples and further
documentation of their use. 

<<>>=
# Build a small 1-d SciDB test array:
iquery("store(build(<x:double>[i=1:10,10,0],i/10.0),A)")

# Return the result of a SciDB apply operator in an R iterator with a
# chunk size of at most 7 rows at a time:
it <- iquery("apply(A,y,sqrt(x))", return=TRUE, iterative=TRUE, n=7)

nextElem(it)

nextElem(it)
@


\section{SciDB Arrays for R Users}\label{arrays}

Data are organized by SciDB in $n$-dimensional sparse arrays.  ``Sparse''  in
SciDB arrays means that array elements may be left undefined, and such array
elements are omitted from computations. Note that this interpretation of sparse
differs in a subtle way from that used by sparse matrices defined by R's
Matrix package (whose sparse matrix elements are implicitly zero).


The elements of a SciDB array, called {\it cells}, contain one or more {\it
attributes} (similar to R variables).  The number and data types of attributes
are uniform across all cells in an array, and SciDB stores data for each
attribute separately. Thus, a one-dimensional SciDB array is conceptually very
similar to a data frame in R: the SciDB dimension index corresponds to data
frame row index, and SciDB attributes to data frame columns.
Higher-dimensional arrays in SciDB don't correspond directly to objects in R;
the {\tt scidb} $n$-dimensional array class described below is limited to
working with one attribute at a time to more closely emulate standard R
arrays.

The integer coordinate systems used to index SciDB arrays are similar to R,
except that SciDB integer indices may be zero or negative, and are represented
by 63-bit signed integers (R indices use either unsigned positive 31-bit
integer or positive 52-bit integer-valued double values). This means that
SciDB arrays can't always be indexed by R--in practice R users should avoid
creating SciDB arrays with coordinate systems that extend past R's limits.

SciDB attribute values within a cell may be explicitly marked missing,
indicated by a special SciDB missing code also referred to as a NULL code.
SciDB internally supports a large number of possible missing codes. All SciDB
missing code values are mapped to \verb+NA+ values in R.
 
The \verb+scidb+ package defines two array classes for R with data backed
by SciDB arrays: the \verb+scidbdf+ class for data frame-like objects,
and the \verb+scidb+ class for matrix and general array objects.


\section{The {\tt scidbdf} data frame-like class}

The \verb+scidbdf+ class defines a data frame-like class backed by
one-dimensional SciDB arrays. Like data frames, the columns represent variables
of distinct types and the rows represent observations. Each attribute in  the
backing SciDB array represents a column in the \verb+scidbdf+ object. The
\verb+scidbdf+ object elements are read-only (the backing SciDB array may be
manually updated, for example using the iquery function).

Use the \verb+as.scidb+ function to create new SciDB arrays and corresponding
\verb+scidbdf+ R objects by copying R data frames into SciDB. The \verb+types+
and \verb+nullable+ options may be used to explicitly specify the SciDB type
and nullability values of each data frame column.  See the R help page for
\verb+df2scidb+ for more information.

The \verb+scidb+ function returns an R \verb+scidbdf+ or \verb+scidb+
object representation of an existing SciDB array.

Objects of class \verb+scidbdf+ obey a subset of R indexing operations.
Columns may be selected by numeric index or attribute name, but the short-hand
R \$-style variable selection notation is not supported. Rows may only be
selected by integer.

Subsets of \verb+scidbdf+ objects are returned as new \verb+scidbdf+ objects of
the appropriate size (dimension, number of attributes/columns). The package
uses the special empty-bracket notation, \verb+[]+, to indicate that data
should be materialized to R as an R data frame. Illustrations are provided
in the examples.


\subsection{Examples of {\tt scidbdf} objects}

<<>>=
library("scidb")
scidbconnect()

# Copy the Michelson-Morley experiment data to SciDB,
# returning a scidbdf object
X <- as.scidb(morley, name="morely")
str(X)

# Materialize the first four rows of X to R (using [] to return results to R):
X[1:4, c("Run","Speed")][]
@














\newpage
\section{The {\tt scidb} array class}

Similarly to the data frame-like class, the package defines the
\verb+scidb+ array class for R that represents vectors, matrices
and general $n$-dimensional arrays. Array objects defined by the {\tt
scidb} class behave in some ways like standard R arrays.  But their data
reside in SciDB and most operations on them are computed by SciDB.

The \verb+scidb+ array class supports working with a single array attribute at
a time to conform to R arrays (which generally support a single value per
cell).  Consider the iris data, represented as a data frame within SciDB as a
1-d array with five attributes. The next example illustrates creating a
\verb+scidbdf+ data frame-like object in R referring to the iris data and also
a 1-d \verb+scidb+ array object in R referring to the same data using the
\verb+Petal_Width+ attribute.  Note that, unlike R, SciDB numeric array indices
may be zero or negative and generally use zero as the default origin. Data from
{\tt scidb} array objects are not materialized to R until extracted with the
empty indexing function, \verb+[]+.

<<>>=
# Upload the iris data to SciDB storing it in an array named `iris`
# and create a data frame-like object `df` that refers to it:
df <- as.scidb(iris,name="iris")
dim(df)

# Now create a vector-like object using the same data in SciDB, but
# referring to only one of the available variables (Petal_Width):
x <- scidb("iris", attribute="Petal_Width", data.frame=FALSE)
length(x)

x[99:103][]

# List all available attributes in the SciDB array:
x@attributes
@


\subsection{Subsetting and indexing {\tt scidb} array objects}

SciDB arrays act in many ways like regular arrays in R.  Rectilinear subarrays
may be defined by ranges of integer indices.  Subarrays of \verb+scidb+ array
objects are returned as new \verb+scidb+ array objects of the appropriate size.

Despite the similarities, there are differences between regular R and {\tt
scidb} array object indexing. In particular:
\begin{itemize}
\item The empty indexing function, \verb+[]+ applied to a {\tt scidb}
object materializes its array data as an R array. If the data exceed
a return size threshold, an iterator over the array indices and data
will be returned instead. The package option
\verb+options("scidb.max.array.elements")+
controls the threshold.
\item Index ranges follow SciDB convention. Arrays may have non-positive
integer indices.  In particular, note that the
starting SciDB integer index is arbitrary, but often zero. (By contrast,
the upper left
corner of R arrays is always indexed by [1,1,...].)
\item {\tt scidb} array objects are limited to double-precision and
32-bit signed integer numeric, logical, and single-byte character
(char) element data types.
\end{itemize}

The following example illustrates basic subsetting operations on a
sparse matrix. Note that the default SciDB index is zero-based.
<<>>=
scidbremove("A", error=invisible)

# Manually create an example sparse 2-d array in SciDB:
iquery("store(build_sparse(<val:double>[i=0:9,10,0,j=0:9,5,0],i*j,i<=j),A)")
A <- scidb("A")

# Indexing operations return new SciDB array objects:
A[0:5,2:4]

# But their data can be materialized into an R array with []:
A[0:5,2:4][]
@


\subsection{Arithmetic operations}

The \verb+scidb+ array class supports a few standard linear algebra operations
for dense and sparse matrices and vectors.

The example below shows a dense matrix example that compares matrix arithmetic
in R and SciDB.  Like previous data frame examples, use {\tt as.scidb}
to export R matrices and vectors to SciDB arrays.

We generally use {\tt as.scidb} for convenience--it's far from the most
efficient way to import data into SciDB. For very large data, use the SciDB
bulk data load utility as outlined in the SciDB documentation instead.

<<>>=
v <- as.scidb(matrix(rnorm(25),5))

str(v)

crossprod( v[] )              # Compute t(v) %*% v using R

# Now compute using SciDB, and materialize the result to R:
crossprod(v)[]
@

Basic matrix/vector arithmetic operations on SciDB arrays (addition,
subtraction, matrix and matrix vector products, scalar products,
\verb+crossprod+ and \verb+tcrossprod+) use standard R syntax.  You can mix R
and SciDB matrices and vectors and the {\tt scidb} package will try to do the
right thing by assigning R data to temporary SciDB arrays conforming to
required database schema.  The next example shows an example of computations
that mix {\tt scidb} array objects with R vectors.

<<>>=
# Build a 5x5 SciDB matrix, assigned to R variable 'A':
A <- build("random() % 10", dim=c(5,5))

# Compute a matrix-vector product against an R-generated vector (in SciDB):
y <- A %*% rnorm(5)

# Return the computed result to R
y[]
@


\begin{table}[!h]\label{ops}
\centering
\resizebox{0.95\textwidth}{!}{
\begin{tabularx}{1.15\textwidth}{llXl}
Expression & Operation & Operands & Output \\
\hline
$A$ {\tt \%*\%} $B$ & Matrix multiplication & $A,B$ Conformable SciDB arrays or R matrices/vectors & SciDB array\\
$A \pm B$ & Matrix summation/difference & $A,B$ SciDB arrays or R matrices/vectors & SciDB array\\
{\tt crossprod(}$A$,$B${\tt)} & Cross product {\tt t(A) \%*\% B} & $A,B$ SciDB arrays or R matrices/vectors & SciDB array\\
{\tt tcrossprod(}$A$,$B${\tt)} & Cross product {\tt A \%*\% t(B)} & $A,B$ SciDB arrays or R matrices/vectors & SciDB array\\
$A$ {\tt */} $B$ & Elementwise product/quotient & $A,B$ Conformable SciDB arrays or R matrices/vectors & SciDB array\\
$\alpha$ {\tt */} $A$ & Scalar multiplication/division & SciDB array $A$, scalar $\alpha$ & SciDB array\\
{\tt t(}$A${\tt )}& Transpose & SciDB array $A$& SciDB array\\
{\tt sin(}$A${\tt )}& Sine function, also other trig functions & SciDB array $A$& SciDB array\\
{\tt log(}$A,base${\tt )}& Logarithm function & SciDB array $A$, numeric base& SciDB array\\
{\tt diff(}$A,lag=1${\tt )}& Finite differences & SciDB array $A$, integer lag& SciDB array\\
$A[\hbox{range},\hbox{range},\ldots]$ & Subarray &  SciDB array $A$ & SciDB Array\\
$A[\,]$ & Materialize & SciDB array A& R array \\
{\tt svd}$(A)$ & Singular value decomposition & Dense SciDB array A& SciDB arrays \\
{\tt svd}$(A,nu)$ & Truncated SVD& Sparse or dense SciDB array A& SciDB arrays \\
\hline
\end{tabularx}}
\vspace{28px}
\caption{SciDB Array Class Operations}
\end{table}




\subsection{Apply, sweep and other array functions}

R's \verb+apply+ function applies a function along margins of an array or
matrix.  A verion of \verb+apply+ limited to SciDB aggregation functions is
available for \verb+scidb+ and \verb+scidbdf+ objects. The SciDB
aggregation function is supplied as a string and references the array
attributes. Here is an example:
<<>>=
# Create an example matrix and compute its column means:
A <- matrix(as.double(1:20),nrow=5)
apply(A,2,mean)

# Make a copy of the matrix in SciDB and assign it to the scidb object X:
X <- as.scidb(A)
str(X)
# Compute its column means, using a SciDB aggregation expression:
m <- apply(X,2,"avg(val)")
m[]
@

A version of R's \verb+sweep+ function works similarly.
Next we subtract the column means from each column of the SciDB matrix
in the last example.
<<>>=
sweep(X,MARGIN=2,STATS=m)[] 
@
More general aggregation and data manipulation functions are outlined
in the next section.

The \verb+diff+ function works similarly to R's usual one for
computing finite differences along vectors and matrices.


Use the \verb+cumulate+  function to compute running operations along data, for
example cumulative sums. The operation to be performed must be a valud SciDB
aggregation function expressed as a character string. Here is a simple example:
<<>>=
x <- as.scidb(iris)
y <- cumulate(x, "sum(Petal_Width)")
print(head(y, n=10))
@


The \verb+count+ function applied to a {\tt scidb} array object returns the
count of non-empty cells in in the backing SciDB array.

\verb+crossprod+ and \verb+tcrossprod+ are defined for \verb+scidb+
array objects and mixtures of \verb+scidb+ and matrices.

The \verb+image+ function displays a heatmap of a regrid of a 2-d {\tt scidb}
array object, and returns the regridded array to R.  The \verb+grid=c(m,n)+
function parameter specifies the regrid window sizes in each array dimension,
and defaults to the array chunk sizes. The regrid aggregation function may be
specified using the \verb+op+ function argument, and by default averages the
array values over the regrid windows.






\section{Data manipulation functions}

The package defines a number of common SciDB data manipulation functions for
SciDB array objects.

\subsection{Conditional subset operations}

The package supports array subset filter operations along dimension indices.
Use the \verb+subset+ function to filter array contents by a boolean expression
similarly to the standard R \verb+subset+ function. Under the hood, this
function uses the SciDB \verb+filter+ operator--the function name \verb+subset+
more closely matches standard R syntax.

The \verb+subset+ function requires two arguments, a SciDB array reference
and a valid SciDB logical expression represented as a string.
Here is a simple example:
<<>>=
df <- as.scidb(iris)

subset(df,"Petal_Width > 2.4")[]
@


\subsection{Database joins}
The package overloads the R \verb+merge+ function, enabling a number of
database join-like operations on SciDB array objects. Use the R
\verb+help("merge",package="scidb")+ function for detailed help.
Here is an example that performs an inner join on array attributes:
<<>>=
authors <- data.frame(
            surname = c("Tukey", "Venables", "Tierney", "Ripley", "McNeil"),
            nationality = c("US", "Australia", "US", "UK", "Australia"),
            deceased = c("yes", rep("no", 4)),
            stringsAsFactors=FALSE)
books <- data.frame(
          name = c("Tukey", "Venables", "Tierney",
                   "Ripley", "Ripley", "McNeil", "R Core"),
          title = c("Exploratory Data Analysis",
                    "Modern Applied Statistics ...",
                    "LISP-STAT", "Spatial Statistics", "Stochastic Simulation",
                    "Interactive Data Analysis", "An Introduction to R"),
          other.author = c(NA, "Ripley", NA, NA, NA, NA, "Venables & Smith"),
          stringsAsFactors=FALSE)

a <- as.scidb(authors)
b <- as.scidb(books)

merge(a,b,by=list("surname","name"))[,c(4:6,8:9)][]
# cf. The standard R data.frame merge function:
# merge(authors,books,by.x="surname",by.y="name")
@

The \verb+merge+ implementation has some limitations outlined in its man page.
Joins on attributes are presently the most limited cases, and most joins are
limited to inner joins at the moment. Use \verb+merge+ on array dimensions for
the most flexibility.


\subsection{Aggregation}
The \verb+aggregate+ function is overloaded to perform aggregation operations
on SciDB array objects.  Aggregation may be defined over array dimensions
and/or array attributes very similarly to standard R aggregation syntax, except
that aggregation functions must be valid SciDB aggregate expressions,
represented as strings.

<<>>=
# Upload the iris data to SciDB and create a data frame-like object
# that refers to it:
df <- as.scidb(iris)

aggregate(df, by="Species", FUN="avg(Petal_Length), stdev(Petal_Width)")[]
@


\subsection{Binding new variables to an array}

The SciDB package defines the \verb+bind+ function to add variables to arrays
similar to the R \verb+cbind+ function for data frames.  However, \verb+bind+
can also operate on higher-dimensional arrays. The example below adds a
variable named `prod` to the SciDB array \verb+df+ defined in the last example.

<<>>=
y  <- bind(df, "prod", "Petal_Length * Petal_Width")

head(y, n=3)
@


\subsection{Sorting, enumerating factors}

Use the \verb+sort+ function to sort on a subset of dimensions and/or
attribute of a SciDB array object, creating a new sorted array.

Use the \verb+unique+ function to return a SciDB array that removes
duplicate elements of a single-attribute SciDB input array.

Use the \verb+index_lookup+ function along with  \verb+unique+ to bind a new
variable that enumerates unique values of a variable similarly to the R
\verb+factor+ function.

Examples follow. Note that we use the SciDB \verb+project+ function in one
example. \verb+project+ presents an alternative syntax to the functionally
equivalent column subset selection of variables using brackets.

<<>>=
x <- as.scidb(iris,name="iris")

# Sort x by Petal_Width and Species
a <- sort(x, attributes=c("Petal_Width","Species"))
head(a, n=3)

# Find unique values of Species:
unique(a[,"Species"])[]

# Add a new variable that enumerates factor levels of Species:
head(index_lookup(a, unique(project(a,"Species")), "Species"))
@





\section{Array promises and garbage collection}

Most opreations on SciDB array objects return array promises--new SciDB array
objects that have not been fully evaluated by SciDB yet, but that promise to
return values when asked. SciDB array promises are essentially just SciDB query
expressions together with a schema that the resulting output array will have
once it's been evaluated. In such cases, the \verb+name+ slot of a \verb+scidb+
or \verb+scidbdf+ promise object shows the SciDB query expresion.

Occasionally, promise objects must be explicitly evaluated and stored as an
intermediate result in the SciDB.  Such dynamically allocated arrays use the
following naming convention: They all begin with ``R\_array'' and end with a
unique numeric identifier determined by the current SciDB session.

Ephemeral intermediate arrays are connected to R's garbage collector and
autotically deleted from the SciDB catalog when they are no longer needed by R.

Sometimes efficiencies can be gained by explicitly evaluating a promise object
and storing it to a SciDB array. The package provides the \verb+scidbeval+
function to let users decide to explicitly evaluate an expression.  Many data
manipulation functions also have an \verb+eval+ argument for the same purpose.

SciDB arrays keep references to other SciB array dependencies in a list within
an environment, preventing them from automatic garbage collection so that the
promise can be evaluated. The environment is slot is named \verb+@gc+ in the
array objects and the dependency list is \verb+@gc$depend+.

Users can disconnect SciDB array objects from R's garbage collector (making
stored arrays persistent in SciDB), by setting \verb+@gc$remove = FALSE+.

Here is an example:
<<eval=TRUE,echo=FALSE>>=
gc()
@
<<>>=
# Create a 5x4 SciDB matrix named 'test' in the database. We set `gc=TRUE`
# so that the SciDB array `test` will be deleted by R's garbage collector
# for us automatically:
A <- as.scidb(matrix(rnorm(20),nrow=5), name="test", gc=TRUE)
A@name

# Assign the third row of the transpose to a scidb object B:
B <- t(A)[3,]
# B is a promise object--it's name is an (unevaluated) SciDB query expression
# that depends on A. But it has a valid output schema, and we also see that
# it depends ultimately on the SciDB array `test`:
B@name
B@schema
B@gc$depend[[1]]@gc$depend[[1]]@name

# We can use `scidbeval` to force B's evaluation and storage inside SciDB:
C <- scidbeval(B)
# C has the same schema as B, but is now evaluated and stored inside SciDB
# using an automatically-generated name. Unlike B, C does not depend on A
# any more.
C@name
C@schema
@















\section{Using SciDB arrays with existing R code}

This section illustrates using SciDB together with R and standard R packages
from CRAN to compute solutions to large-scale problems.  R functions that rely
on linear algebra and aggregation operations may be adapted to use SciDB arrays
in place of native R vectors and matrices in order to benefit from the
large-scale parallel computing capabilities of SciDB.

The truncated singular value distribution (TSVD) is an important, widely used
analysis method.  Truncated SVD lies at the heart of principle components and
other analysis methods.

We use the {\tt irlba} package from CRAN,
\href{http://cran.r-project.org/web/packages/irlba/index.html}
{http://cran.r-project.org/web/packages/irlba/index.html} to efficiently
compute a truncated SVD. The IRLB algorithm used by the package relies on
mostly matrix--vector products, and is well-suited for use with SciDB.  In
fact, we can use SciDB matrices with the {\tt irlba} package without modifying
the package at all.

The {\tt irlba} package includes an option for user-defined matrix-vector
products between a matrix {\tt A} and a vector {\tt x}, that is the R
computation \verb+A %*% x+, and for computation of \verb+t(A) %*% x+.  Because
matrix vector and transpose operations are defined for the {\tt scidb} array
class, we don't technically need to use the user-defined option in the {\tt
irlba} package. However, by using the option, we can greatly improve efficiency
by avoiding explicitly forming the matrix transpose by computing 
\verb+t( t(x) %*% A )+ instead of \verb+t(A) %*% x+. Listing \ref{matvec}
illustrates this.

\begin{Code}
\begin{lstlisting}[caption=Efficient matrix vector product for IRLBA, label=matvec]
# Let A be a scidb matrix
# Let x be a numeric vector
# Compute A %*% x if transpose=FALSE
# Compute t(A) %*% x if transpose=TRUE
# Return an R numeric vector.
matmul = function(A, x, transpose=FALSE)
{
  if(transpose)
  {
    return(t(crossprod(x,A))[,drop=FALSE]))
  }
  (A %*% x)[,drop=FALSE]
}
\end{lstlisting}
\end{Code}

After defining the custom matrix or transpose matrix product in Listing
\ref{matvec}, we can load and use the {\tt irlba} package with SciDB arrays.
Listing \ref{irlb} illustrates computation of a few largest singular values and
associated singular vectors of a $50,000\times 50,000$ matrix with random
entries (consuming about $18\,$GB).  That problem large enough that it can't
be computed easily in R--the matrix is too large to even represent in R version
2 (although that changes soon in R version 3).


\begin{Code}
\begin{lstlisting}[caption=Example large truncated SVD computation, label=irlb]
library("irlba")
library("scidb")
scidbconnect()

# Create a 50,000 x 50,000 matrix filled with random-valued entries:
iquery(
  "store(build(<x:double>[i=0:49999,1000,0,j=0:49999,1000,0],double(random())/1000000000),A)"
)
a = scidb("A")
dim(a)
[1] 50000 50000

# Compute the three largest singular values and corresponding vectors;
S = irlba(a, nu=3, nv=3, matmul=matmul)

\end{lstlisting}
\end{Code}
After a while, the algorithm returns the truncated SVD in the variable S. The
result obtained is comparable to what the {\tt svd(A, nu=3, nv=3)} command
would have produced, if it could handle the large matrix. Further optimizations
are possible, but this simple example shows that it can be easy to get
large-scale computation working without rewriting R code.



\section{Package installation}

Installation proceeds in two steps: installing the R package on any computer
that has a network connection to a SciDB database, and installing a simple
network service on the SciDB database coordinator computer.

\subsection{Installing the R package from sources on GitHub}

The \verb+scidb+ package source is maintained in the SciDBR GitHub repository.
That's where the most up-to-date version of the package is available. Released
versions of the package posted to CRAN are updated much less frequently,
approximatley semiannually. A git tag indicates each CRAN release version of
the package in the source code repository.

The wonderful {\tt devtools} R package makes installation of source
packages from GitHub nearly as simple as installation from CRAN.
\begin{Code}
\begin{lstlisting}[caption=Installing the R package from GitHub, label=github]
library("devtools")
install_github("SciDBR", "Paradigm4")
\end{lstlisting}
\end{Code}

\subsection{Installing the R package from CRAN}
The \verb+scidb+ package is available on CRAN. Start an R session and run:
\begin{Code}
\begin{lstlisting}[caption=Installing the R package from CRAN, label=cran]
install.packages("scidb")
\end{lstlisting}
\end{Code}


\subsection{Installing the simple HTTP service for SciDB}
\label{shim}

The SciDB R package requires installation of a simple open-source HTTP network
service called \verb+shim+ on the computer that SciDB is installed on. The
service needs to be installed only on the SciDB coordinator computer, not on
client computers that connect to SciDB from R.  It's available in packaged
binary form for supported SciDB operating systems, and as source code which can
be compiled and deployed on any SciDB installation.

Both installation approaches install the \verb+shim+ network service on the
SciDB coordinator computer. Installing as a service requires root permission.
The compiled source code version requires no special permissions to run.

Installation from binary software packages for SciDB-supported operating
systems is easiest. Detailed up-to-date information can be found on
Paradigm4's laboratory on Paradigm4's Github repository at 
\href{https://github.com/Paradigm4/shim/wiki/Installing-shim}
{https://github.com/Paradigm4/shim/wiki/Installing-shim}.
We outline installation for each supported operating system below. See our github page
for source code. The open source package author, Bryan Lewis, maintains
binary packages for SciDB-supported operating systems. They are tied to specific
versions of SciDB. The present version is 13.9 (September, 2013).


\subsubsection{Installation on RHEL/CentOS 6}
\begin{Code}
\begin{lstlisting}[caption=Installing the simple HTTP service on RHEL, label=shimrhel]
# Install with:
wget http://paradigm4.github.io/shim/shim-13.9-1.x86_64.rpm
rpm -i shim-13.9-1.x86_64.rpm

# (Uninstall, if desired, with:)
yum remove shim
\end{lstlisting}
\end{Code}


\subsubsection{Installation on Ubuntu 12.04}
\begin{Code}
\begin{lstlisting}[caption=Installing the simple HTTP service on Ubuntu, label=shimubuntu]
# Install with:
wget http://paradigm4.github.io/shim/shim_13.9_amd64.deb
sudo gdebi shim_13.9_amd64.deb

# (Uninstall, if desired, with:)
apt-get remove shim
\end{lstlisting}
\end{Code}
See the Wiki and web pages at 
\href{https://github.com/Paradigm4/shim/}
{https://github.com/Paradigm4/shim/} for up to date package information and source code.

The installed \verb+shim+ network service exposes SciDB as a very simple HTTP
API.  It includes a simple browser-based status and query tool. After
installing shim, point your browser to the I.P. address of the SciDB
coordinator machine and port 8080, for example:
\href{http://localhost:8080}{http://localhost:8080} on the coordinator
machine itself. Note that this API is not official and may change in the
future. Help drive those changes by contributing ideas, code and
bugfixes to the project on github, or feel free to discuss the service on the
SciDB.org/forum.



\subsection{Error handling}

SciDB errors are trapped and converted to R errors that can be handled by
standard R mechanisms. Some operations might try to return too much data to R,
exceeding R's indexing limitations, system memory, or both. The package tries
to avoid this kind of error using package options that limit returned data size
shown in the next section.

\subsection{Package options, miscellaneous notes, and software license}

The \verb+scidb+ package defines several global package options.
Package options may be set and retrieved with the R
\verb+options+ function, and are listed in Table 2.
\begin{table}[ht!]
\label{options}
\centering
\resizebox{0.95\textwidth}{!}{
\begin{tabularx}{1.2\textwidth}{llX}
Option & Default value & Description \\
\hline
scidb.debug & NULL & Set to TRUE to display all queries issued to the SciDB engine and
other debugging information.\\
scidb.index.sequence.limit & 100 000 000 &  Maximum allowed scidb array object sequential indexing limit (for larger ranges, use between)\\
scidb.max.array.elements & 100 000 000 & Maximum allowed non-empty elements to return in a subsetting operation of a scidb array object.\\
\hline
\end{tabularx}}
\\[24pt]
\caption{Package options}
\end{table}

Miscellaneous notes follow:
\begin{table}[ht!]
\label{options}
\centering
\resizebox{0.99\textwidth}{!}{
\begin{tabularx}{1.2\textwidth}{lX}
- & R does not support 64-bit integer types. 64-bit signed and
unsigned integers smaller than
$2^{53}$  in magnitude will be represented as double-precision floating
point numbers.  64-bit integers outside that range appear as $+/-$\verb+Inf+.
All other integers (int8, uint8, int16, uint16, etc.) are represented
in R by 32-bit signed integers. The uint32 type is not directly supported.\\
- & R doesn't support single-precision floating point numbers.
{\tt iquery} results convert single-precision numbers within SciDB
to double-precision floating-point numbers in R.
Single-precision SciDB numbers are not supported by the {\tt scidb}
array class. \\ 
- & SciDB does not natively support complex numbers. Loading complex
numbers directly into SciDB from R is not defined. \\
- & The {\tt iquery} function provides the most flexible mechanism
for type conversion between the systems, fully under user control
using {\tt read.table} options. \\
- & Allowed array naming conventions vary between R and SciDB. For
example, SciDB does not allow decimal points in attribute names. The
package may alter names with character substitution to reconcile names
when it is reasonable to do so.
A warning is emitted whenever an object is automatically renamed in this
way.
\end{tabularx}}
\end{table}
\\[-18pt]


\newpage
\begin{verbatim}
Copyright (C) 2008-2013 SciDB, Inc.

The SciDB package for R is free software: you can redistribute it and/or modify
it under the terms of the AFFERO GNU General Public License as published by the
Free Software Foundation.

The SciDB package for R is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY
KIND, INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY, NON-INFRINGEMENT, OR
FITNESS FOR A PARTICULAR PURPOSE. See the AFFERO GNU General Public License for
the complete license terms.

You should have received a copy of the AFFERO GNU General Public License along
with the package.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
\end{verbatim}
\end{document}
